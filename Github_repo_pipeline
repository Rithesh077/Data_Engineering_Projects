# github_repo_pipeline.py

import requests
import pandas as pd


def get_user_input():
    """Gets the search topic and fields from the user."""
    query = input("Enter the topic to search: ")
    fields_str = input(
        "Enter fields to display (comma-separated, e.g., name,stars,owner): ")
    fields = [field.strip() for field in fields_str.split(',')]
    return query, fields


def fetch_and_process_github_repos(query, fields):
    """
    Fetches, processes, and displays repository data based on user input.
    """
    # E: Extract
    url = f"https://api.github.com/search/repositories?q={query}&sort=stars"
    print(f"\nFetching data from API for query: '{query}'...")
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        repo_list = data.get('items', [])
    except requests.exceptions.RequestException as e:
        print(f"Error: API request failed. {e}")
        return

    # T: Transform
    cleaned_data = []
    for repo in repo_list:
        processed_repo = {}
        for field in fields:
            if field == 'owner':
                processed_repo['owner'] = repo.get(
                    'owner', {}).get('login', 'N/A')
            elif field == 'stars':
                processed_repo['stars'] = repo.get('stargazers_count', 0)
            else:
                processed_repo[field] = repo.get(field, 'N/A')
        cleaned_data.append(processed_repo)

    if not cleaned_data:
        print("No repositories found for this query.")
        return

    # L: Load
    df = pd.DataFrame(cleaned_data)
    print(f"Processed {len(cleaned_data)} repositories.")
    print("Search Results:\n")
    print(df.to_string())


if __name__ == "__main__":
    search_query, requested_fields = get_user_input()
    fetch_and_process_github_repos(search_query, requested_fields)
